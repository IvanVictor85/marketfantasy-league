/**
 * Script de Reset de Competi√ß√£o
 *
 * üö® SCRIPT DE EMERG√äNCIA - ADMIN ONLY
 *
 * Executa o reset completo do estado da competi√ß√£o.
 * Usado para corrigir estados de "limbo" ap√≥s refatora√ß√µes.
 *
 * Uso: npx tsx scripts/reset-competition.ts
 */

import { prisma } from '../src/lib/prisma';
import { getTop100Tokens } from '../src/lib/services/coingecko.service';

async function resetCompetition() {
  const startTime = Date.now();

  try {
    console.log('üö® ========================================');
    console.log('üö® ADMIN: RESET DE COMPETI√á√ÉO INICIADO');
    console.log('üö® ========================================\n');

    // ============================================
    // ETAPA 1: LIMPAR ESTADO ANTIGO
    // ============================================
    console.log('üóëÔ∏è  ETAPA 1: Limpando competi√ß√µes antigas...');

    const competitionsCount = await prisma.competition.count();
    console.log(`üìä Competi√ß√µes encontradas: ${competitionsCount}`);

    if (competitionsCount > 0) {
      await prisma.competition.deleteMany({});
      console.log(`‚úÖ ${competitionsCount} competi√ß√£o(√µes) deletada(s)`);
      console.log('‚úÖ CompetitionTokens deletados automaticamente (cascade)\n');
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma competi√ß√£o para deletar\n');
    }

    // ============================================
    // ETAPA 2: BUSCAR TOP 100 DA COINGECKO
    // ============================================
    console.log('üåê ETAPA 2: Buscando Top 100 tokens da CoinGecko...');

    const top100Tokens = await getTop100Tokens();
    console.log(`‚úÖ ${top100Tokens.length} tokens obtidos da CoinGecko\n`);

    // ============================================
    // ETAPA 3: CALCULAR DATAS DA PR√ìXIMA RODADA
    // ============================================
    console.log('üìÖ ETAPA 3: Calculando datas da pr√≥xima rodada...');

    const now = new Date();
    console.log(`‚è∞ Hor√°rio atual: ${now.toISOString()}`);

    // Pr√≥ximo Domingo √†s 21h (BRT)
    const nextSunday = new Date(now);
    const dayOfWeek = now.getDay(); // 0 = Domingo, 6 = S√°bado
    const daysUntilSunday = dayOfWeek === 0 ? 7 : (7 - dayOfWeek);

    nextSunday.setDate(now.getDate() + daysUntilSunday);
    nextSunday.setHours(21, 0, 0, 0); // 21:00:00

    // Pr√≥xima Sexta √†s 21h (5 dias ap√≥s domingo)
    const nextFriday = new Date(nextSunday);
    nextFriday.setDate(nextSunday.getDate() + 5);

    console.log(`üìÖ In√≠cio (Domingo 21h): ${nextSunday.toISOString()}`);
    console.log(`üìÖ Fim (Sexta 21h): ${nextFriday.toISOString()}\n`);

    // ============================================
    // ETAPA 4: CRIAR NOVA COMPETI√á√ÉO (PENDING)
    // ============================================
    console.log('üèóÔ∏è  ETAPA 4: Criando nova competi√ß√£o...');

    const mainLeague = await prisma.league.findFirst({
      where: {
        leagueType: 'MAIN',
        isActive: true
      }
    });

    if (!mainLeague) {
      throw new Error('Liga principal n√£o encontrada');
    }

    console.log(`‚úÖ Liga encontrada: ${mainLeague.name} (${mainLeague.id})`);

    const newCompetition = await prisma.competition.create({
      data: {
        leagueId: mainLeague.id,
        startTime: nextSunday,
        endTime: nextFriday,
        status: 'pending', // Draft aberto
        prizePool: 0,
        distributed: false
      }
    });

    console.log(`‚úÖ Competi√ß√£o criada: ${newCompetition.id}`);
    console.log(`   Status: ${newCompetition.status}`);
    console.log(`   In√≠cio: ${newCompetition.startTime.toISOString()}`);
    console.log(`   Fim: ${newCompetition.endTime.toISOString()}\n`);

    // ============================================
    // ETAPA 5: SALVAR CARD√ÅPIO DE TOKENS
    // ============================================
    console.log('üíæ ETAPA 5: Salvando card√°pio de tokens...');

    const tokensToCreate = top100Tokens.map(token => ({
      competitionId: newCompetition.id,
      tokenId: token.id,
      symbol: token.symbol,
      name: token.name,
      imageUrl: token.image,
      marketCapRank: token.market_cap_rank
    }));

    await prisma.competitionToken.createMany({
      data: tokensToCreate,
      skipDuplicates: true
    });

    console.log(`‚úÖ ${tokensToCreate.length} tokens salvos na CompetitionTokens`);
    console.log(`üîí Card√°pio TRAVADO at√© ${nextFriday.toISOString()}\n`);

    // ============================================
    // RESUMO FINAL
    // ============================================
    const duration = Date.now() - startTime;

    console.log('‚úÖ ========================================');
    console.log('‚úÖ RESET CONCLU√çDO COM SUCESSO');
    console.log('‚úÖ ========================================');
    console.log(`‚è±Ô∏è  Dura√ß√£o: ${duration}ms`);
    console.log(`üìä Competi√ß√£o: ${newCompetition.id}`);
    console.log(`üìä Status: ${newCompetition.status}`);
    console.log(`üìä Tokens no card√°pio: ${tokensToCreate.length}`);
    console.log('');
    console.log('üîî Pr√≥ximos passos:');
    console.log('   1. Recarregar a p√°gina do frontend');
    console.log('   2. /api/market deve retornar 100 tokens');
    console.log('   3. Edi√ß√£o de time deve estar desbloqueada');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erro durante reset de competi√ß√£o:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar
resetCompetition()
  .then(() => {
    console.log('‚úÖ Script finalizado com sucesso!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script falhou:', error);
    process.exit(1);
  });
