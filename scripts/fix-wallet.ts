#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixWallet() {
  console.log('üîß Vinculando carteira ao usu√°rio pretimaoairdrops...\n');

  try {
    // Buscar usu√°rio
    const user = await prisma.user.findUnique({
      where: { email: 'pretimaoairdrops@gmail.com' }
    });

    if (!user) {
      console.error('‚ùå Usu√°rio n√£o encontrado!');
      console.log('\nüí° Usu√°rios existentes no banco:');
      const allUsers = await prisma.user.findMany({
        select: { id: true, email: true, publicKey: true }
      });
      console.table(allUsers);
      process.exit(1);
    }

    console.log('‚úÖ Usu√°rio encontrado:');
    console.log('   Email:', user.email);
    console.log('   ID:', user.id);
    console.log('   Nome:', user.name);
    console.log('   Carteira atual:', user.publicKey || 'NENHUMA');
    console.log('');

    // IMPORTANTE: Cole aqui o endere√ßo da sua carteira Solana
    const WALLET_ADDRESS = 'H2312uRYYfSFsKiJeMwSriv6F7iEBkWxtPQCV6ArRAjT';

    if (WALLET_ADDRESS === 'H2312uRYYfSFsKiJeMwSriv6F7iEBkWxtPQCV6ArRAjT') {
      console.error('‚ùå Por favor, edite o script e coloque o endere√ßo real da sua carteira!');
      console.error('   Abra: scripts/fix-wallet.ts');
      console.error('   Linha 26: const WALLET_ADDRESS = "SUA_CARTEIRA_AQUI"');
      console.error('');
      console.error('üìã Exemplo de endere√ßo Solana:');
      console.error('   H231k8PASmuHTxVKZdqNLCNDpU5SWVfDRAJtFLPhRAJt');
      console.error('');
      process.exit(1);
    }

    // Valida√ß√£o b√°sica do endere√ßo
    if (WALLET_ADDRESS.length < 32 || WALLET_ADDRESS.length > 44) {
      console.error('‚ùå Endere√ßo de carteira inv√°lido!');
      console.error('   Endere√ßos Solana t√™m entre 32 e 44 caracteres');
      console.error('   Voc√™ forneceu:', WALLET_ADDRESS.length, 'caracteres');
      process.exit(1);
    }

    console.log('üîç Verificando se carteira j√° est√° em uso...');
    const existingWallet = await prisma.user.findFirst({
      where: {
        publicKey: WALLET_ADDRESS,
        id: { not: user.id }
      }
    });

    if (existingWallet) {
      console.error('‚ùå Esta carteira j√° est√° vinculada a outro usu√°rio!');
      console.error('   Email do outro usu√°rio:', existingWallet.email);
      console.error('   ID do outro usu√°rio:', existingWallet.id);
      console.error('');
      console.error('üí° Op√ß√µes:');
      console.error('   1. Use uma carteira diferente');
      console.error('   2. Fa√ßa login com a conta que j√° usa essa carteira');
      process.exit(1);
    }

    console.log('‚úÖ Carteira dispon√≠vel!');
    console.log('');

    // Atualizar carteira
    console.log('üíæ Vinculando carteira ao usu√°rio...');
    const updated = await prisma.user.update({
      where: { id: user.id },
      data: { publicKey: WALLET_ADDRESS }
    });

    console.log('');
    console.log('üéâ Carteira vinculada com sucesso!');
    console.log('');
    console.log('üìã Dados atualizados:');
    console.log('   Email:', updated.email);
    console.log('   ID:', updated.id);
    console.log('   Carteira:', updated.publicKey);
    console.log('');
    console.log('‚úÖ Agora voc√™ pode usar essa carteira para entrar em ligas!');

  } catch (error) {
    console.error('‚ùå Erro ao vincular carteira:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar script
fixWallet()
  .then(() => {
    console.log('\n‚úÖ Script conclu√≠do!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Script falhou:', error);
    process.exit(1);
  });
