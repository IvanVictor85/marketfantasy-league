import fs from 'fs';
import path from 'path';

/**
 * Script para atualizar automaticamente a lista de tokens v√°lidos
 * baseada nos dados da API /api/tokens
 */

async function updateValidTokens() {
  try {
    console.log('üîç Buscando tokens da API...');
    
    // Buscar tokens da API local
    const response = await fetch('http://localhost:3000/api/tokens');
    
    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }
    
    const tokens = await response.json();
    console.log(`üìä Encontrados ${tokens.length} tokens na API`);
    
    // Extrair s√≠mbolos e ordenar
    const symbols = tokens
      .map((token: any) => token.symbol)
      .sort()
      .filter((symbol: string) => symbol && symbol.length > 0);
    
    console.log(`‚úÖ S√≠mbolos extra√≠dos: ${symbols.length}`);
    
    // Gerar o conte√∫do do arquivo
    const fileContent = `// Lista de tokens v√°lidos (gerada automaticamente da API)
// √öltima atualiza√ß√£o: ${new Date().toISOString()}
export const VALID_TOKEN_SYMBOLS = [
${symbols.map((symbol: string) => `  '${symbol}'`).join(',\n')}
];

// Fun√ß√£o para validar se um token √© v√°lido
export function isValidToken(symbol: string): boolean {
  return VALID_TOKEN_SYMBOLS.includes(symbol.toUpperCase());
}

// Fun√ß√£o para validar uma lista de tokens
export function validateTokens(tokens: string[]): { valid: boolean; invalidTokens: string[] } {
  const invalidTokens = tokens.filter(token => !isValidToken(token));
  return {
    valid: invalidTokens.length === 0,
    invalidTokens
  };
}

// Fun√ß√£o para obter todos os tokens v√°lidos
export function getAllValidTokens(): string[] {
  return [...VALID_TOKEN_SYMBOLS];
}

// Fun√ß√£o para verificar se a lista precisa ser atualizada
export function shouldUpdateTokenList(): boolean {
  // Implementar l√≥gica para verificar se a lista est√° desatualizada
  // Por exemplo, verificar timestamp da √∫ltima atualiza√ß√£o
  return false;
}
`;
    
    // Caminho do arquivo
    const filePath = path.join(process.cwd(), 'src', 'lib', 'valid-tokens.ts');
    
    // Fazer backup do arquivo atual
    const backupPath = filePath + '.backup';
    if (fs.existsSync(filePath)) {
      fs.copyFileSync(filePath, backupPath);
      console.log(`üìã Backup criado: ${backupPath}`);
    }
    
    // Escrever novo arquivo
    fs.writeFileSync(filePath, fileContent, 'utf8');
    
    console.log(`‚úÖ Arquivo atualizado: ${filePath}`);
    console.log(`üìä Total de tokens v√°lidos: ${symbols.length}`);
    
    // Verificar se ASTER est√° inclu√≠do
    if (symbols.includes('ASTER')) {
      console.log('üéØ ASTER agora est√° inclu√≠do na lista de tokens v√°lidos!');
    } else {
      console.log('‚ö†Ô∏è  ASTER n√£o foi encontrado na API');
    }
    
    // Mostrar alguns tokens para verifica√ß√£o
    console.log('\nüìã Primeiros 10 tokens:');
    symbols.slice(0, 10).forEach((symbol: string) => {
      console.log(`  - ${symbol}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar tokens v√°lidos:', error);
    process.exit(1);
  }
}

// Executar o script
updateValidTokens();