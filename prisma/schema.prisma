// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model League {
  id             String   @id @default(cuid())
  name           String
  leagueType     String   @default("MAIN") // "MAIN" for Liga Principal, "COMMUNITY" for future leagues
  entryFee       Float    // Entry fee in SOL
  maxPlayers     Int?     // NULL for unlimited (Liga Principal)
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean  @default(true)
  treasuryPda    String   // Solana PDA address
  programId      String?  // Solana Program ID for this league
  adminWallet    String   // Admin wallet address
  protocolWallet String   // Protocol treasury wallet
  emblemUrl      String?  // URL of the selected emblem image
  description    String?  // League description
  status         String   @default("ACTIVE") // League status
  badgeUrl       String?  // Badge URL
  bannerUrl      String?  // Banner URL
  prizeDistribution String  @default("{\"first\": 50, \"second\": 30, \"third\": 20}") // Prize distribution percentages
  totalPrizePool Float   @default(0) // Current total prize pool in SOL
  participantCount Int   @default(0) // Current number of participants
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  teams          Team[]
  leagueEntries  LeagueEntry[]
  competitions   Competition[]

  @@map("leagues")
}

model LeagueEntry {
  id               String   @id @default(cuid())
  leagueId         String
  userWallet       String   // User's Solana wallet address
  transactionHash  String   @unique // Solana transaction signature
  amountPaid       Float    // Amount paid in SOL
  status           String   @default("CONFIRMED") // "PENDING", "CONFIRMED", "FAILED"
  blockHeight      Int?     // Block height of the transaction
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  league           League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, userWallet])
  @@map("league_entries")
}

model Team {
  id               String   @id @default(cuid())
  leagueId         String
  userWallet       String   // User's Solana wallet address
  teamName         String
  tokens           String   // JSON array of token symbols only: ["BTC", "ETH", "SOL", ...]. Details fetched from CoinGecko.
  totalScore       Float?   // Calculated performance score
  rank             Int?     // Final ranking in the league
  selectedMascotUrl String? // URL of the selected mascot image
  hasValidEntry    Boolean  @default(false) // Whether user has paid entry fee
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  league           League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, userWallet])
  @@map("teams")
}

model Token {
  id          String   @id @default(cuid())
  symbol      String   @unique
  name        String
  coingeckoId String   @unique
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("tokens")
}

model Competition {
  id          String   @id @default(cuid())
  leagueId    String
  startTime   DateTime
  endTime     DateTime
  status      String   // "pending", "active", "completed"
  winners     String?  // Array of winner wallet addresses (JSON string)
  prizePool   Float    // Total prize pool in SOL
  distributed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  league      League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("competitions")
}

model PriceHistory {
  id          String   @id @default(cuid())
  tokenSymbol String
  price       Float
  timestamp   DateTime
  source      String   @default("coingecko")

  @@map("price_history")
  @@index([tokenSymbol, timestamp])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  twitter   String?
  discord   String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authTokens AuthToken[]

  @@map("users")
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([email])
  @@map("verification_codes")
}

model AuthToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("auth_tokens")
}