export interface VerificationCode {
  email: string;
  code: string;
  expiresAt: Date;
  attempts: number;
}

export interface AuthToken {
  userId: string;
  email: string;
  name: string;
  expiresAt: Date;
}

export interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  twitter?: string;
  discord?: string;
  bio?: string;
  createdAt: Date;
}

// Armazenamento global para evitar perda de dados entre requisi√ß√µes
declare global {
  var __verificationCodes: Map<string, VerificationCode> | undefined;
  var __authTokens: Map<string, AuthToken> | undefined;
  var __users: Map<string, User> | undefined;
}

// Simula√ß√£o de armazenamento em mem√≥ria (em produ√ß√£o, usar Redis ou banco de dados)
export const verificationCodes = globalThis.__verificationCodes ?? (globalThis.__verificationCodes = new Map<string, VerificationCode>());

// Simula√ß√£o de armazenamento de tokens (em produ√ß√£o, usar JWT ou sess√µes)
export const authTokens = globalThis.__authTokens ?? (globalThis.__authTokens = new Map<string, AuthToken>());

// Simula√ß√£o de banco de usu√°rios (em produ√ß√£o, usar banco de dados)
export const users = globalThis.__users ?? (globalThis.__users = new Map<string, User>());

// Log para debug
console.log('üîß [STORAGE] Inicializando armazenamento global:', {
  verificationCodesSize: verificationCodes.size,
  authTokensSize: authTokens.size,
  usersSize: users.size,
  isGlobal: !!globalThis.__verificationCodes
});

// Fun√ß√£o para gerar c√≥digo de 6 d√≠gitos
export function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// Fun√ß√£o para validar email
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// Fun√ß√£o para gerar token de sess√£o
export function generateSessionToken(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

// Fun√ß√£o para criar ou atualizar usu√°rio
export function createOrUpdateUser(email: string): User {
  const existingUser = Array.from(users.values()).find(user => user.email === email);
  
  if (existingUser) {
    return existingUser;
  }
  
  const newUser: User = {
    id: Math.random().toString(36).substring(2),
    email,
    name: email.split('@')[0], // Nome padr√£o baseado no email
    createdAt: new Date()
  };
  
  users.set(newUser.id, newUser);
  return newUser;
}